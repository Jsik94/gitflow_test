name: Backmerge to Main

on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  backmerge:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      - name: Get PR information
        id: pr-info
        run: |
          echo "source_branch=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
          echo "target_branch=${{ github.event.pull_request.base.ref }}" >> $GITHUB_OUTPUT
          echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
      
      - name: Check if backmerge is needed
        id: check-backmerge
        run: |
          SOURCE_BRANCH="${{ steps.pr-info.outputs.source_branch }}"
          TARGET_BRANCH="${{ steps.pr-info.outputs.target_branch }}"
          
          # main으로의 PR이 아니면 스킵
          if [ "$TARGET_BRANCH" != "main" ]; then
            echo "needed=false" >> $GITHUB_OUTPUT
            echo "target_branch=develop" >> $GITHUB_OUTPUT
            echo "Skipping backmerge: PR is not targeting main branch"
            exit 0
          fi
          
          # Release 브랜치인지 확인
          if [[ "$SOURCE_BRANCH" =~ ^release/ ]]; then
            echo "needed=true" >> $GITHUB_OUTPUT
            echo "target_branch=develop" >> $GITHUB_OUTPUT
            echo "Release PR detected: will backmerge main to develop"
          else
            # 일반 PR의 경우 source 브랜치에 main을 merge
            git fetch origin main
            BEHIND_COUNT=$(git rev-list --count origin/$SOURCE_BRANCH..origin/main)
            
            if [ "$BEHIND_COUNT" -gt 0 ]; then
              echo "needed=true" >> $GITHUB_OUTPUT
              echo "target_branch=$SOURCE_BRANCH" >> $GITHUB_OUTPUT
              echo "Backmerge needed: main is $BEHIND_COUNT commits ahead of $SOURCE_BRANCH"
            else
              echo "needed=false" >> $GITHUB_OUTPUT
              echo "target_branch=$SOURCE_BRANCH" >> $GITHUB_OUTPUT
              echo "No backmerge needed: $SOURCE_BRANCH is up to date with main"
            fi
          fi
      
      - name: Perform backmerge
        if: steps.check-backmerge.outputs.needed == 'true'
        run: |
          SOURCE_BRANCH="${{ steps.pr-info.outputs.source_branch }}"
          TARGET_BRANCH="${{ steps.check-backmerge.outputs.target_branch }}"
          
          # 타겟 브랜치로 체크아웃
          git checkout $TARGET_BRANCH
          git pull origin $TARGET_BRANCH
          
          # main 브랜치의 최신 변경사항을 merge
          git merge origin/main --no-edit
          
          # 충돌이 있는지 확인
          if [ $? -ne 0 ]; then
            echo "Merge conflict detected. Please resolve manually."
            exit 1
          fi
          
          # 변경사항이 있는지 확인
          if git diff --quiet HEAD~1 HEAD; then
            echo "No changes to push after merge"
          else
            # 변경사항 푸시
            git push origin $TARGET_BRANCH
            echo "Successfully backmerged main into $TARGET_BRANCH"
          fi
      
      - name: Create comment on PR
        if: steps.check-backmerge.outputs.needed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.pr-info.outputs.pr_number }}
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Backmerge completed')
            );
            
            if (!botComment) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ steps.pr-info.outputs.pr_number }},
                body: `✅ **Backmerge completed**\n\nSuccessfully merged latest changes from \`main\` into \`${{ steps.check-backmerge.outputs.target_branch }}\` branch.`
              });
            }
      
      - name: Skip backmerge comment
        if: steps.check-backmerge.outputs.needed == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.pr-info.outputs.pr_number }}
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Backmerge skipped')
            );
            
            if (!botComment) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ steps.pr-info.outputs.pr_number }},
                body: `ℹ️ **Backmerge skipped**\n\nNo backmerge needed: \`${{ steps.check-backmerge.outputs.target_branch }}\` branch is already up to date with \`main\`.`
              });
            }
