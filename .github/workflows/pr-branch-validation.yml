name: PR Branch Direction Validation

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]
  workflow_run:
    workflows: ["Auto Labeler"]
    types: [completed]

jobs:
  validate-pr-direction:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      
    steps:
      - name: Get PR Info
        id: pr-info
        uses: actions/github-script@v7
        with:
          script: |
            let sourceBranch, targetBranch, prTitle, prNumber;
            
            if (context.eventName === 'workflow_run') {
              // workflow_run에서는 원본 PR 정보를 가져와야 함
              const prs = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:${context.payload.workflow_run.head_branch}`,
                state: 'open'
              });
              
              if (prs.data.length > 0) {
                const pr = prs.data[0];
                sourceBranch = pr.head.ref;
                targetBranch = pr.base.ref;
                prTitle = pr.title;
                prNumber = pr.number;
              } else {
                console.log('No matching PR found for workflow_run');
                return;
              }
            } else {
              // 직접 PR 이벤트인 경우
              sourceBranch = context.payload.pull_request.head.ref;
              targetBranch = context.payload.pull_request.base.ref;
              prTitle = context.payload.pull_request.title;
              prNumber = context.payload.pull_request.number;
            }
            
            core.setOutput('source-branch', sourceBranch);
            core.setOutput('target-branch', targetBranch);
            core.setOutput('pr-title', prTitle);
            core.setOutput('pr-number', prNumber);
            
            console.log('🔍 브랜치 검증:', sourceBranch, '→', targetBranch);
        
      - name: Validate Gitflow PR Direction
        if: steps.pr-info.outputs.pr-number
        uses: actions/github-script@v7
        env:
          SOURCE_BRANCH: ${{ steps.pr-info.outputs.source-branch }}
          TARGET_BRANCH: ${{ steps.pr-info.outputs.target-branch }}
          PR_TITLE: ${{ steps.pr-info.outputs.pr-title }}
          PR_NUMBER: ${{ steps.pr-info.outputs.pr-number }}
        with:
          script: |
            const sourceBranch = process.env.SOURCE_BRANCH;
            const targetBranch = process.env.TARGET_BRANCH;
            const prTitle = process.env.PR_TITLE;
            const prNumber = parseInt(process.env.PR_NUMBER);
            
            console.log('PR:', sourceBranch, '→', targetBranch);
            console.log('Title:', prTitle);
            
            // GitFlow 브랜치 방향 규칙 (완전한 매트릭스)
            const gitflowRules = [
              // ✅ 일반적으로 허용되는 방향
              { from: /^feature\//, to: ['develop'], status: 'allowed', description: '기능 개발 완료 시 통합' },
              { from: /^feature\//, to: /^feature\//, status: 'allowed', description: '동일 기능 내 서브브랜치 머지 (협업 시)' },
              { from: /^(fix|bugfix)\//, to: ['develop'], status: 'allowed', description: '버그 수정 완료 시 통합' },
              { from: /^develop$/, to: /^release\//, status: 'allowed', description: '릴리즈 준비 시작 시' },
              { from: /^release\//, to: ['develop'], status: 'allowed', description: '릴리즈 이후 개발 브랜치에 반영 (백머지)' },
              { from: /^release\//, to: ['main', 'master'], status: 'allowed', description: '배포 승인 후 프로덕션 반영' },
              { from: /^hotfix\//, to: ['main', 'master'], status: 'allowed', description: '긴급 패치 배포' },
              { from: /^hotfix\//, to: ['develop'], status: 'allowed', description: '핫픽스 반영 후 develop에도 적용' },
              
              // ⚠️ 제한적으로 허용 (특수 상황)
              { from: /^feature\//, to: /^release\//, status: 'warning', description: '릴리즈 브랜치에서 필요한 기능만 병합 (제한적)' },
              { from: /^develop$/, to: /^feature\//, status: 'warning', description: '특정 기능 브랜치에 최신 develop 반영 필요할 때 (드물게)' },
              { from: /^hotfix\//, to: /^release\//, status: 'warning', description: '릴리즈 준비 중인 브랜치에도 적용 필요할 경우' },
              
              // ❌ 금지된 방향
              { from: /^feature\//, to: /^hotfix\//, status: 'forbidden', description: '일반적으로 불필요' },
              { from: /^feature\//, to: ['main', 'master'], status: 'forbidden', description: '직접 main 머지는 금지 (develop을 거쳐야 함)' },
              { from: /^develop$/, to: /^hotfix\//, status: 'forbidden', description: '핫픽스는 main 기반으로 진행' },
              { from: /^develop$/, to: ['main', 'master'], status: 'forbidden', description: 'release를 거쳐야 main 머지' },
              { from: /^release\//, to: /^feature\//, status: 'forbidden', description: '의미 없음' },
              { from: /^hotfix\//, to: /^feature\//, status: 'forbidden', description: '의미 없음' },
              { from: /^(main|master)$/, to: ['develop'], status: 'forbidden', description: 'release/hotfix를 통해 간접 반영해야 함' }
            ];
            
            let status = 'unknown';
            let matchedRule = null;
            let statusMessage = '';
            
            // 브랜치 규칙 검증
            for (const rule of gitflowRules) {
              let sourceMatches = false;
              let targetMatches = false;
              
              // 소스 브랜치 매칭
              sourceMatches = rule.from.test(sourceBranch);
              
              // 타겟 브랜치 매칭
              if (Array.isArray(rule.to)) {
                targetMatches = rule.to.includes(targetBranch);
              } else if (rule.to instanceof RegExp) {
                targetMatches = rule.to.test(targetBranch);
              }
              
              if (sourceMatches && targetMatches) {
                status = rule.status;
                matchedRule = rule;
                break;
              }
            }
            
            // 결과에 따른 메시지 생성
            if (status === 'allowed') {
              statusMessage = '✅ **GitFlow 규칙 준수**\n\n' +
                '**브랜치 방향**: `' + sourceBranch + '` → `' + targetBranch + '`\n' +
                '**상태**: 승인됨\n' +
                '**설명**: ' + matchedRule.description + '\n\n' +
                '🎉 올바른 GitFlow 패턴입니다!';
            } else if (status === 'warning') {
              statusMessage = '⚠️ **GitFlow 특수 케이스**\n\n' +
                '**브랜치 방향**: `' + sourceBranch + '` → `' + targetBranch + '`\n' +
                '**상태**: 제한적 허용\n' +
                '**설명**: ' + matchedRule.description + '\n\n' +
                '**주의사항**: 이 병합이 정말 필요한지 다시 한번 확인하세요.\n' +
                '팀 리드 또는 시니어 개발자의 승인을 받는 것을 권장합니다.';
            } else if (status === 'forbidden') {
              statusMessage = '❌ **GitFlow 규칙 위반**\n\n' +
                '**브랜치 방향**: `' + sourceBranch + '` → `' + targetBranch + '`\n' +
                '**상태**: 금지됨\n' +
                '**이유**: ' + matchedRule.description + '\n\n' +
                '**해결 방법**: 올바른 GitFlow 패턴을 따라 PR을 다시 생성하세요.';
            } else {
              statusMessage = '❓ **알 수 없는 브랜치 패턴**\n\n' +
                '**브랜치 방향**: `' + sourceBranch + '` → `' + targetBranch + '`\n' +
                '**상태**: 미정의된 패턴\n\n' +
                '**권장사항**: 표준 GitFlow 브랜치 명명 규칙을 사용하세요.\n' +
                '- feature/*, fix/*, hotfix/*, release/*, develop, main';
            }
            
            // PR에 코멘트 추가
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: statusMessage
            });
            
            // 상태에 따른 워크플로우 처리
            if (status === 'forbidden') {
              console.error('GitFlow 규칙 위반:', statusMessage);
              process.exit(1);
            } else if (status === 'warning') {
              console.log('GitFlow 특수 케이스 감지:', statusMessage);
              // 경고는 통과시키되 로그에 기록
            } else if (status === 'allowed') {
              console.log('✅ GitFlow 규칙 준수');
            } else {
              console.log('⚠️ 알 수 없는 패턴이지만 통과시킴');
            }
            
      - name: Check Special Cases
        if: steps.pr-info.outputs.pr-number
        uses: actions/github-script@v7
        env:
          SOURCE_BRANCH: ${{ steps.pr-info.outputs.source-branch }}
          TARGET_BRANCH: ${{ steps.pr-info.outputs.target-branch }}
          PR_NUMBER: ${{ steps.pr-info.outputs.pr-number }}
        with:
          script: |
            const sourceBranch = process.env.SOURCE_BRANCH;
            const targetBranch = process.env.TARGET_BRANCH;
            const prNumber = parseInt(process.env.PR_NUMBER);
            
            // GitFlow 특수 케이스 및 권장사항
            const recommendations = [];
            
            // Release 백머지 권장사항
            if (/^release\//.test(sourceBranch) && targetBranch === 'develop') {
              recommendations.push('🔄 **Release 백머지 체크리스트**:\n' +
                '- [ ] 프로덕션 배포가 완료되었는지 확인\n' +
                '- [ ] 릴리즈 노트가 작성되었는지 확인\n' +
                '- [ ] 충돌 해결 시 테스트 재진행');
            }
            
            // Hotfix 다중 병합 권장사항
            if (/^hotfix\//.test(sourceBranch)) {
              recommendations.push('🚨 **Hotfix 다중 병합 체크리스트**:\n' +
                '- [ ] main/master 브랜치에 먼저 병합 완료\n' +
                '- [ ] develop 브랜치에도 동일한 수정 적용 예정\n' +
                '- [ ] 현재 진행 중인 release 브랜치가 있다면 해당 브랜치에도 적용 고려');
            }
            
            // Feature 브랜치 권장사항
            if (/^feature\//.test(sourceBranch) && targetBranch === 'develop') {
              recommendations.push('✨ **Feature 병합 체크리스트**:\n' +
                '- [ ] 최신 develop 브랜치와 충돌 없는지 확인\n' +
                '- [ ] 기능 테스트 완료\n' +
                '- [ ] 코드 리뷰 완료\n' +
                '- [ ] 관련 문서 업데이트');
            }
            
            // Feature 간 병합 (협업)
            if (/^feature\//.test(sourceBranch) && /^feature\//.test(targetBranch)) {
              recommendations.push('🤝 **Feature 간 협업 병합**:\n' +
                '- [ ] 동일한 기능 영역인지 확인\n' +
                '- [ ] 타겟 feature 브랜치 소유자의 승인 필요\n' +
                '- [ ] 최종적으로는 develop으로 병합 예정');
            }
            
            if (recommendations.length > 0) {
              console.log('GitFlow 권장사항:', recommendations.length + '개');
              
              const recommendationMessage = '📋 **GitFlow 권장사항**\n\n' +
                recommendations.join('\n\n') + '\n\n' +
                '💡 **참고**: 이는 권장사항이며, 프로젝트 상황에 맞게 조정하세요.\n\n' +
                '🎉 **모든 PR 자동화가 완료되었습니다!**';
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: recommendationMessage
              });
            } else {
              // 권장사항이 없는 경우에도 완료 메시지
              const completionMessage = '🎉 **모든 PR 자동화가 완료되었습니다!**\n\n' +
                '모든 GitFlow 검증을 통과했습니다. 이제 리뷰를 받고 병합을 진행하세요.';
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: completionMessage
              });
            }
